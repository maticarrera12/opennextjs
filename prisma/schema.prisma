// ============================================
// PRISMA SCHEMA - AI Brand Kit + Better Auth
// ============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// BETTER AUTH MODELS
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  
  // Better Auth relations
  sessions      Session[]
  accounts      Account[]
  
  // ============================================
  // AI BRAND KIT - User Extensions
  // ============================================
  
  // Roles & Access
  role          Role       @default(USER)

  // Current Plan
  plan          PlanType    @default(FREE)
  planStatus    PlanStatus  @default(ACTIVE)

  // Credits
  credits         Int   @default(20)
  lifetimeCredits Int   @default(0)

  // Subscription tracking
  subscriptionProvider   SubscriptionProvider?
  subscriptionId         String?   @unique
  subscriptionStatus     String?
  currentPeriodStart     DateTime?
  currentPeriodEnd       DateTime?
  cancelAtPeriodEnd      Boolean   @default(false)

  // Stripe
  stripeCustomerId       String?   @unique
  stripePriceId          String?

  // Lemon Squeezy
  lemonSqueezyCustomerId String?   @unique
  lemonSqueezyVariantId  String?

  // AI Brand Kit Relations
  projects      BrandProject[]
  assets        BrandAsset[]
  creditHistory CreditTransaction[]
  purchases     Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([email])
  @@index([plan])
  @@index([stripeCustomerId])
  @@index([lemonSqueezyCustomerId])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ============================================
// ENUMS
// ============================================

enum Role {
  USER
  ADMIN
}

enum PlanType {
  FREE    
  PRO     
  BUSINESS 
}

enum PlanStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  PAUSED
}

enum SubscriptionProvider {
  STRIPE
  LEMONSQUEEZY
}

// ============================================
// CREDITS SYSTEM
// ============================================

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactionGroupId String?

  type        CreditTransactionType
  amount      Int
  balance     Int

  reason      String
  description String?

  assetId     String?
  asset       BrandAsset? @relation(fields: [assetId], references: [id])

  purchaseId  String?
  purchase    Purchase? @relation(fields: [purchaseId], references: [id])

  metadata    Json?

  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
  @@index([type])
}

enum CreditTransactionType {
  DEDUCTION
  REFUND
  PURCHASE
  SUBSCRIPTION
  BONUS
  ADMIN_ADJUSTMENT
}

// ============================================
// PURCHASES
// ============================================

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        PurchaseType
  provider    SubscriptionProvider

  plan        PlanType?
  credits     Int?

  amount      Int
  currency    String       @default("usd")

  providerCustomerId     String
  providerPaymentId      String
  providerSubscriptionId String?
  providerProductId      String?

  status      PurchaseStatus

  metadata    Json?

  creditTransactions CreditTransaction[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([provider, providerPaymentId])
  @@index([userId])
  @@index([provider])
  @@index([status])
}

enum PurchaseType {
  SUBSCRIPTION
  CREDIT_PACK
  UPGRADE
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}

// ============================================
// BRAND PROJECTS
// ============================================

model BrandProject {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name             String
  businessType     String
  industry         String
  targetAudience   String?
  brandVibe        String[]
  description      String?

  assets      BrandAsset[]

  isPublic    Boolean  @default(false)
  isFavorite  Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, createdAt])
}

// ============================================
// GENERATED ASSETS
// ============================================

model BrandAsset {
  id          String       @id @default(cuid())
  projectId   String?
  project     BrandProject? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        AssetType
  data        Json

  url              String?
  storageProvider  String   @default("vercel-blob")
  storagePath      String?
  fileSize         Int?
  mimeType         String?

  prompt           String?
  creditsUsed      Int
  generationTime   Int?
  model            String?

  status           AssetStatus @default(COMPLETED)
  errorMessage     String?

  isFavorite  Boolean @default(false)
  downloads   Int     @default(0)

  creditTransactions CreditTransaction[]

  createdAt   DateTime @default(now())

  @@index([projectId])
  @@index([userId, createdAt])
  @@index([type])
  @@index([status])
}

enum AssetType {
  LOGO
  AVATAR
  BRAND_NAME
  TAGLINE
  COLOR_PALETTE
  BRAND_VOICE
}

enum AssetStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// ============================================
// PLAN LIMITS & FEATURES
// ============================================

model PlanLimit {
  id          String   @id @default(cuid())
  plan        PlanType
  interval    PlanInterval @default(MONTHLY)

  monthlyCredits       Int
  maxProjectsPerMonth  Int?
  maxAssetsPerProject  Int?

  features    Json

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([plan, interval])
}

enum PlanInterval {
  MONTHLY
  YEARLY
}


// ============================================
// Waitlist
// ============================================

model WaitlistUser {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  referralCode  String   @unique
  referredById  String?
  referredBy    WaitlistUser? @relation("Referrals", fields: [referredById], references: [id])
  referrals     WaitlistUser[] @relation("Referrals")
  invited       Boolean  @default(false)
  createdAt     DateTime @default(now())
}
